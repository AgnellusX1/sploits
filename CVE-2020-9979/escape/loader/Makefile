GEN=gen
BIN=bin


STAGE1_ASM_TEMPLATE=stage1.s.in
STAGE1_ASM=$(GEN)/jump.s
STATE1_ASM_OBJ=$(GEN)/jump.o
STAGE1_SRC=jump.c
GEN_PIC_OBJ=$(GEN)/pic.dylib
GEN_PIC=$(GEN)/pic
STAGE1=$(BIN)/shellcode

SHELLCODE_CFLAGS = \
	-Wno-implicit-function-declaration \
	-fno-stack-protector \
	-fPIC

LDFLAGS= -framework CoreFoundation \
	-framework Foundation \
	-framework AppKit \
	-F /System/Library/PrivateFrameworks/ \
	-framework MobileAsset \
	-bind_at_load

PAYLOAD=bootstrap.c payload.m ../Mojave/exploit.m ../Mojave/WebCoreApi.c ../../utils/DictAssets.m
LAUNCH=launcher.c
HEADERS=common.h


DYLIB=$(BIN)/escape.dylib
EXE=$(BIN)/launch


.PHONY: all

loader:
	clang -dynamiclib $(SHELLCODE_CFLAGS) $(STAGE1_SRC) -o $(GEN_PIC_OBJ)
	gobjcopy -Obinary $(GEN_PIC_OBJ) -j .text $(GEN_PIC)

	nm $(GEN_PIC_OBJ) | grep _bootstrap | python3 pipeline.py asm $(STAGE1_ASM_TEMPLATE) $(STAGE1_ASM)
	clang -shared -arch x86_64 -mllvm --x86-asm-syntax=intel $(STAGE1_ASM) -o $(STATE1_ASM_OBJ)
	gobjcopy -Obinary $(STATE1_ASM_OBJ) -j .text $(STAGE1)
	python3 pipeline.py truncate $(STAGE1)
	cat $(GEN_PIC) >> $(STAGE1)


all: dylib loader launcher

dylib: $(PAYLOAD) prepare
	cc $(PAYLOAD) $(LDFLAGS) -dynamiclib -fno-stack-protector -o $(DYLIB)

launcher: $(LAUNCH)
	cc $(LAUNCH) -o $(EXE)

prepare:
	mkdir -p $(BIN) $(GEN)

run: all
	$(EXE) $(STAGE1) $(DYLIB)

debug: all
	lldb $(EXE) -- $(STAGE1) $(DYLIB)

format:
	clang-format -i $(LAUNCH) $(PAYLOAD) $(HEADERS)

clean:
	rm -rf $(BIN)/* $(GEN)/*

