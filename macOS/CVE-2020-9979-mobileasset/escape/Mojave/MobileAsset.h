//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark -

//
// File: /System/Library/PrivateFrameworks/MobileAsset.framework/Versions/A/MobileAsset
// UUID: 0C9B7077-BFCF-3A2E-8F54-D7C2820893FD
//
//                           Arch: x86_64
//                Current version: 1.0.0
//          Compatibility version: 1.0.0
//                 Source version: 437.8.49.0.0
//
// Objective-C Garbage Collection: Unsupported
//


@interface MAProgressHandler : NSObject
{
    unsigned long long _notificationInterval;
    NSMutableArray *_callBackArray;
}

@property(readonly, nonatomic) NSMutableArray *callBackArray; // @synthesize callBackArray=_callBackArray;
@property(nonatomic) unsigned long long notificationInterval; // @synthesize notificationInterval=_notificationInterval;
- (void)dealloc;
- (void)addCallBack:(CDUnknownBlockType)arg1;
- (id)initWithCallBack:(CDUnknownBlockType)arg1;

@end

@interface MAAsset : NSObject
{
    NSDictionary *_attributes;
    NSString *_assetType;
    NSString *_assetId;
    long long _state;
}

+ (void)startCatalogDownload:(id)arg1 options:(id)arg2 then:(CDUnknownBlockType)arg3;
+ (void)startCatalogDownload:(id)arg1 then:(CDUnknownBlockType)arg2;
@property(readonly, nonatomic) long long state; // @synthesize state=_state;
@property(readonly, nonatomic) NSString *assetId; // @synthesize assetId=_assetId;
@property(readonly, nonatomic) NSString *assetType; // @synthesize assetType=_assetType;
@property(readonly, nonatomic) NSDictionary *attributes; // @synthesize attributes=_attributes;
- (BOOL)isEqual:(id)arg1;
- (_Bool)refreshState;
- (_Bool)spaceCheck:(long long *)arg1;
- (long long)configDownloadSync:(id)arg1;
- (void)configDownload:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (long long)cancelDownloadSync;
- (void)cancelDownload:(CDUnknownBlockType)arg1;
- (long long)purgeSync;
- (void)purge:(CDUnknownBlockType)arg1;
- (void)commonAssetDownload:(id)arg1 options:(id)arg2 then:(CDUnknownBlockType)arg3;
- (long long)calculateTimeout;
- (void)startDownload:(id)arg1 then:(CDUnknownBlockType)arg2;
- (void)startDownload:(CDUnknownBlockType)arg1;
- (id)createExtractor;
- (id)hashToString:(id)arg1;
- (void)startDownloadWithExtractor:(CDUnknownBlockType)arg1 options:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)startDownloadWithExtractor:(CDUnknownBlockType)arg1 completion:(CDUnknownBlockType)arg2;
- (void)logAsset;
- (id)assetProperty:(id)arg1;
- (id)getLocalUrl;
- (id)getLocalFileUrl;
- (void)attachProgressCallBack:(CDUnknownBlockType)arg1;
- (id)assetServerUrl;
- (void)dealloc;
- (id)initWithAttributes:(id)arg1;

@end

@interface MAAssetQuery : NSObject
{
    _Bool _augmentState;
    NSDate *_postedDate;
    NSMutableArray *_queryParams;
    NSString *_assetType;
    NSArray *_results;
    NSSet *_assetIds;
    long long _returnTypes;
    NSDate *_lastFetchDate;
}

@property(readonly, nonatomic) NSDate *lastFetchDate; // @synthesize lastFetchDate=_lastFetchDate;
@property(readonly, nonatomic) long long returnTypes; // @synthesize returnTypes=_returnTypes;
@property(readonly, nonatomic) NSSet *assetIds; // @synthesize assetIds=_assetIds;
@property(readonly, nonatomic) NSArray *results; // @synthesize results=_results;
@property(readonly, nonatomic) NSString *assetType; // @synthesize assetType=_assetType;
@property(readonly, nonatomic) _Bool augmentState; // @synthesize augmentState=_augmentState;
@property(readonly, nonatomic) NSMutableArray *queryParams; // @synthesize queryParams=_queryParams;
@property(readonly, nonatomic) NSDate *postedDate; // @synthesize postedDate=_postedDate;
- (long long)queryMetaDataSync;
- (long long)queryInstalledAssetIds;
- (void)queryMetaData:(CDUnknownBlockType)arg1;
- (void)getResultsFromMessage:(id)arg1;
- (long long)addKeyValuePair:(id)arg1 with:(id)arg2;
- (long long)addKeyValueArray:(id)arg1 with:(id)arg2;
- (void)returnTypes:(long long)arg1;
- (void)augmentResultsWithState:(_Bool)arg1;
- (void)dealloc;
- (id)initWithType:(id)arg1;

@end

@interface ASAsset : NSObject
{
    NSString *_assetType;
    NSDictionary *_attributes;
    NSDictionary *_downloadOptions;
    NSString *_clientName;
    NSString *_identifier;
    CDUnknownBlockType _progressHandler;
    // Error parsing type: ^{__MobileAsset={__CFRuntimeBase=QAQ}^{__CFString}^{__CFDictionary}^{__MobileAssetQuery}^{__MobileAssetQuery}C}, name: _cfAsset
    BOOL _userInitiatedDownload;
}

+ (BOOL)nonUserInitiatedDownloadsAllowed;
@property(nonatomic) BOOL userInitiatedDownload; // @synthesize userInitiatedDownload=_userInitiatedDownload;
@property(retain, nonatomic) NSDictionary *downloadOptions; // @synthesize downloadOptions=_downloadOptions;
@property(copy, nonatomic) void(^progressHandler)(NSDictionary *state, NSError *anError); // @synthesize progressHandler=_progressHandler;
@property(readonly, nonatomic) NSString *assetType; // @synthesize assetType=_assetType;
- (id)_getLocalAttribute:(id)arg1;
- (BOOL)purgeAndReturnError:(id *)arg1;
- (void)purge:(CDUnknownBlockType)arg1;
- (BOOL)cancelDownloadAndReturnError:(id *)arg1;
- (void)cancelDownload:(CDUnknownBlockType)arg1;
- (BOOL)resumeDownloadAndReturnError:(id *)arg1;
- (void)resumeDownload:(CDUnknownBlockType)arg1;
- (BOOL)pauseDownloadAndReturnError:(id *)arg1;
- (void)pauseDownload:(CDUnknownBlockType)arg1;
- (void)beginDownloadWithOptions:(id)arg1;
- (void)_downloadWithOptions:(id)arg1 shouldFireCallback:(BOOL)arg2;
- (void)adjustDownloadOptions:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (BOOL)requiredDiskSpaceIsAvailableForDownloadOptions:(id)arg1 requiredBytes:(long long *)arg2 error:(id *)arg3;
- (BOOL)requiredDiskSpaceIsAvailable:(long long *)arg1 error:(id *)arg2;
@property(readonly, nonatomic) NSDate *installDate;
@property(nonatomic) long long garbageCollectionBehavior;
@property(readonly, nonatomic) long long state;
- (long long)assetStateForStateString:(id)arg1;
@property(readonly, nonatomic) NSDictionary *attributes;
@property(readonly, nonatomic) NSURL *localURL;
- (id)assetServerUrl;
- (id)systemAppServerUrl;
- (id)description;
- (BOOL)isEqual:(id)arg1;
- (unsigned long long)hash;
- (void)dealloc;
- (BOOL)isPresentOnDisk;
- (id)identifier;
@property(readonly, nonatomic) NSDictionary *fullAttributes;
@property(retain, nonatomic) NSString *clientName;
- (id)initWithAssetType:(id)arg1 attributes:(id)arg2;

@end

@interface ASAssetQuery : NSObject
{
    BOOL _queriesLocalAssetInformationOnly;
    NSPredicate *_predicate;
    double _networkTimeout;
    NSString *_assetType;
    NSString *_sessionIdentifier;
    NSArray *_results;
}

+ (id)queryPredicateForProperties:(id)arg1;
@property(retain, nonatomic) NSArray *results; // @synthesize results=_results;
@property(copy, nonatomic) NSString *sessionIdentifier; // @synthesize sessionIdentifier=_sessionIdentifier;
@property(copy, nonatomic) NSString *assetType; // @synthesize assetType=_assetType;
@property(nonatomic) double networkTimeout; // @synthesize networkTimeout=_networkTimeout;
@property(nonatomic) BOOL queriesLocalAssetInformationOnly; // @synthesize queriesLocalAssetInformationOnly=_queriesLocalAssetInformationOnly;
@property(retain, nonatomic) NSPredicate *predicate; // @synthesize predicate=_predicate;
- (void)stopQuery;
- (void)startQuery:(CDUnknownBlockType)arg1;
- (id)runQueryAndReturnError:(id *)arg1;
- (id)runQueryForInfoReturnError:(id *)arg1;
- (void)dealloc;
- (id)initWithAssetType:(id)arg1 sessionIdentifier:(id)arg2;
- (id)initWithAssetType:(id)arg1;

@end

@interface MADownloadOptions : NSObject <NSSecureCoding>
{
    BOOL _allowsCellularAccess;
    BOOL _canUseLocalCacheServer;
    BOOL _discretionary;
    long long _timeoutIntervalForResource;
    NSMutableDictionary *_additionalServerParams;
    NSString *_sessionId;
}

+ (BOOL)supportsSecureCoding;
@property(retain, nonatomic) NSString *sessionId; // @synthesize sessionId=_sessionId;
@property(nonatomic) BOOL discretionary; // @synthesize discretionary=_discretionary;
@property(retain, nonatomic) NSMutableDictionary *additionalServerParams; // @synthesize additionalServerParams=_additionalServerParams;
@property(nonatomic) BOOL canUseLocalCacheServer; // @synthesize canUseLocalCacheServer=_canUseLocalCacheServer;
@property(nonatomic) long long timeoutIntervalForResource; // @synthesize timeoutIntervalForResource=_timeoutIntervalForResource;
@property(nonatomic) BOOL allowsCellularAccess; // @synthesize allowsCellularAccess=_allowsCellularAccess;
- (void)logOptions;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (void)dealloc;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

@interface MAMsuDownloadOptions : MADownloadOptions
{
    BOOL _supervised;
    NSString *_requestedProductVersion;
    long long _delayPeriod;
}

+ (BOOL)supportsSecureCoding;
@property(nonatomic) BOOL supervised; // @synthesize supervised=_supervised;
@property(nonatomic) long long delayPeriod; // @synthesize delayPeriod=_delayPeriod;
@property(retain, nonatomic) NSString *requestedProductVersion; // @synthesize requestedProductVersion=_requestedProductVersion;
- (void)logOptions;
- (void)encodeWithCoder:(id)arg1;
- (void)dealloc;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

@interface MADownloadConfig : NSObject <NSSecureCoding>
{
    BOOL _discretionary;
}

+ (BOOL)supportsSecureCoding;
@property(nonatomic) BOOL discretionary; // @synthesize discretionary=_discretionary;
- (void)logConfig;
- (void)encodeWithCoder:(id)arg1;
- (void)dealloc;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

@interface MAProgressNotification : NSObject
{
    BOOL _isStalled;
    long long _totalExpected;
    long long _totalWritten;
    double _expectedTimeRemaining;
}

@property(nonatomic) double expectedTimeRemaining; // @synthesize expectedTimeRemaining=_expectedTimeRemaining;
@property(nonatomic) BOOL isStalled; // @synthesize isStalled=_isStalled;
@property(nonatomic) long long totalWritten; // @synthesize totalWritten=_totalWritten;
@property(nonatomic) long long totalExpected; // @synthesize totalExpected=_totalExpected;

@end

